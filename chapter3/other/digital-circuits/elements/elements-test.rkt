#lang racket

(require rackunit
         "../wires/wires-module.rkt"
         "../agenda/agenda-module.rkt"
         "./elements-module.rkt")

(make-agenda)

(define inv-input (make-wire))
(define inv-output (make-wire))
(inverter inv-input inv-output)
(propagate)
(check-equal? (get-signal inv-output) 1 "inverter true test failed")
(set-signal! inv-input 1)
(propagate)
(check-equal? (get-signal inv-output) 0 "inverter false test failed")

(define and-input-1 (make-wire))
(define and-input-2 (make-wire))
(define and-output (make-wire))

(and-gate and-input-1 and-input-2 and-output)
(propagate)
(check-equal? (get-signal and-output) 0 "and gate false test 2 failed")
(set-signal! and-input-1 1)
(propagate)
(check-equal? (get-signal and-output) 0 "and gate false test 2 failed")
(set-signal! and-input-1 0)
(set-signal! and-input-2 1)
(propagate)
(check-equal? (get-signal and-output) 0 "and gate false test failed")
(set-signal! and-input-1 1)
(propagate)
(check-equal? (get-signal and-output) 1 "and gate true test failed")

(define ha-a (make-wire))
(define ha-b (make-wire))
(define s (make-wire))
(define c (make-wire))

(half-adder ha-a ha-b s c)
(propagate)
(check-equal? (get-signal s) 0 "half-adder test 1 failed")
(check-equal? (get-signal c) 0 "half-adder test 1 failed")
(set-signal! ha-a 1)
(propagate)
(check-equal? (get-signal s) 1 "half-adder test 2 failed")
(check-equal? (get-signal c) 0 "half-adder test 2 failed")
(set-signal! ha-a 0)
(set-signal! ha-b 1)
(propagate)
(check-equal? (get-signal s) 1 "half-adder test 3 failed")
(check-equal? (get-signal c) 0 "half-adder test 3 failed")
(set-signal! ha-a 1)
(propagate)
(check-equal? (get-signal s) 0 "half-adder test 4 failed")
(check-equal? (get-signal c) 1 "half-adder test 4 failed")

(define fa-a (make-wire))
(define fa-b (make-wire))
(define fa-c-in (make-wire))

(full-adder fa-a fa-b fa-c-in s c)
(propagate)
(check-equal? (get-signal s) 0 "full-adder test 1 failed")
(check-equal? (get-signal c) 0 "full-adder test 1 failed")
(set-signal! fa-a 1)
(propagate)
(check-equal? (get-signal s) 1 "full-adder test 2 failed")
(check-equal? (get-signal c) 0 "full-adder test 2 failed")
(set-signal! fa-a 0)
(set-signal! fa-b 1)
(propagate)
(check-equal? (get-signal s) 1 "full-adder test 3 failed")
(check-equal? (get-signal c) 0 "full-adder test 3 failed")
(set-signal! fa-b 0)
(set-signal! fa-c-in 1)
(propagate)
(check-equal? (get-signal s) 1 "full-adder test 4 failed")
(check-equal? (get-signal c) 0 "full-adder test 4 failed")
(set-signal! fa-a 1)
(propagate)
(check-equal? (get-signal s) 0 "full-adder test 5 failed")
(check-equal? (get-signal c) 1 "full-adder test 5 failed")
(set-signal! fa-b 1)
(set-signal! fa-c-in 0)
(propagate)
(check-equal? (get-signal s) 0 "full-adder test 6 failed")
(check-equal? (get-signal c) 1 "full-adder test 6 failed")
(set-signal! fa-a 0)
(set-signal! fa-c-in 1)
(propagate)
(check-equal? (get-signal s) 0 "full-adder test 7 failed")
(check-equal? (get-signal c) 1 "full-adder test 7 failed")
(set-signal! fa-a 1)
(propagate)
(check-equal? (get-signal s) 1 "full-adder test 8 failed")
(check-equal? (get-signal c) 1 "full-adder test 8 failed")
