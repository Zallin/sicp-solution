#lang racket

(require rackunit
         "./solution.rkt")

(define deq (make-deque))

(check-equal? (empty-deque? deq) true "empty deque predicate test 1 failed")
(front-insert-deque! deq 'a)
(check-equal? (front-deque deq) 'a "front deque selector test 1 failed")
(check-equal? (rear-deque deq) 'a "rear deque selector test 1 failed")
(rear-insert-deque! deq 'b)
(check-equal? (rear-deque deq) 'b "rear deque selector test 2 failed")
(check-equal? (empty-deque? deq) false "empty deque predicate test 2 failed")
(front-insert-deque! deq 'c)
(rear-insert-deque! deq 'd)
(check-equal? (front-deque deq) 'c "front deque selector test 2 failed")
(check-equal? (rear-deque deq) 'd "rear deque selector test 3 failed")
(front-delete-deque! deq)
(front-delete-deque! deq)
(check-equal? (front-deque deq) 'b "front deque selector test 3 failed")
(check-equal? (rear-deque deq) 'd "rear deque selector test 4 failed")
(front-delete-deque! deq)
(front-delete-deque! deq)
(check-equal? (empty-deque? deq) true "empty deque predicate test 3 failed")
(front-insert-deque! deq 'a)
(rear-delete-deque! deq)
(check-equal? (empty-deque? deq) true "empty deque predicate test 4 failed")
(front-insert-deque! deq 'a)
(front-insert-deque! deq 'b)
(rear-delete-deque! deq)
(check-equal? (rear-deque deq) 'b "rear deque selector test 5 failed")
(rear-delete-deque! deq)
(check-equal? (empty-deque? deq) true "empty deque predicate test 5 failed")
